Index: ../../.gitignore
===================================================================
diff --git a/../../.gitignore b/../../.gitignore
deleted file mode 100644
--- a/../../.gitignore	(revision cddfc2dcd9c5b5028b6d7467a41269169a0d2bc0)
+++ /dev/null	(revision cddfc2dcd9c5b5028b6d7467a41269169a0d2bc0)
@@ -1,23 +0,0 @@
-# Compiled class file
-*.class
-
-# Log file
-*.log
-
-# BlueJ files
-*.ctxt
-
-# Mobile Tools for Java (J2ME)
-.mtj.tmp/
-
-# Package Files #
-*.jar
-*.war
-*.nar
-*.ear
-*.zip
-*.tar.gz
-*.rar
-
-# virtual machine crash logs, see http://www.java.com/en/download/help/error_hotspot.xml
-hs_err_pid*
Index: ../../edit-compile-execute/src/MathematicalOperators.java
===================================================================
diff --git a/../../edit-compile-execute/src/MathematicalOperators.java b/../../edit-compile-execute/src/MathematicalOperators.java
deleted file mode 100644
--- a/../../edit-compile-execute/src/MathematicalOperators.java	(revision cddfc2dcd9c5b5028b6d7467a41269169a0d2bc0)
+++ /dev/null	(revision cddfc2dcd9c5b5028b6d7467a41269169a0d2bc0)
@@ -1,33 +0,0 @@
-
-public class MathematicalOperators {
-
- public static void main(String[] args) {
-//define variables
-int x = 5;
-int y = 3;
-int z;
-
-//simple addition
-z = x + y;
-System.out.println(z);
-//simple subtraction
-z = x - y;
-System.out.println(z);
-//simple multiplication
-z = x * y;
-System.out.println(z);
-//simple division
-z = x / y;
-System.out.println(z);
-//simple modulus
-z = x % y;
-System.out.println(z);
-//float vs. int
-float f = 3.6f;
-int i = 22;
-double result = f + i;
-
-System.out.println(result);
- }
-
-}
\ No newline at end of file
Index: ../../edit-compile-execute/src/example.java
===================================================================
diff --git a/../../edit-compile-execute/src/example.java b/../../edit-compile-execute/src/example.java
deleted file mode 100644
--- a/../../edit-compile-execute/src/example.java	(revision cddfc2dcd9c5b5028b6d7467a41269169a0d2bc0)
+++ /dev/null	(revision cddfc2dcd9c5b5028b6d7467a41269169a0d2bc0)
@@ -1,27 +0,0 @@
-
-public class example {
-	public static void main(String[] args){
-
-        //initial values
-
-       int i = 200;
-
-            //cast to a short
-
-short s = (short)i;
-
-System.out.println(s);
-
-//cast to a double
-
-double d = (double)i;
-
-System.out.println(d);
-
-//cast to a byte
-
-byte b = (byte)i;
-
-System.out.println(b);
-   }
-}
Index: ../../edit-compile-execute/src/Greeter.java
===================================================================
diff --git a/../../edit-compile-execute/src/Greeter.java b/../../edit-compile-execute/src/Greeter.java
deleted file mode 100644
--- a/../../edit-compile-execute/src/Greeter.java	(revision cddfc2dcd9c5b5028b6d7467a41269169a0d2bc0)
+++ /dev/null	(revision cddfc2dcd9c5b5028b6d7467a41269169a0d2bc0)
@@ -1,7 +0,0 @@
-
-public class Greeter {
-
-	public static void main(String[] args) {
-		System.out.println("Hello");
-	}
-}
Index: ../../edit-compile-execute/src/MyClass.java
===================================================================
diff --git a/../../edit-compile-execute/src/MyClass.java b/../../edit-compile-execute/src/MyClass.java
deleted file mode 100644
--- a/../../edit-compile-execute/src/MyClass.java	(revision cddfc2dcd9c5b5028b6d7467a41269169a0d2bc0)
+++ /dev/null	(revision cddfc2dcd9c5b5028b6d7467a41269169a0d2bc0)
@@ -1,6 +0,0 @@
-
-public class MyClass {
-	public static void main(String[] args) {
-		System.out.println("Joshua Larsen");
-	}
-}
Index: ../../edit-compile-execute/.classpath
===================================================================
diff --git a/../../edit-compile-execute/.classpath b/../../edit-compile-execute/.classpath
deleted file mode 100644
--- a/../../edit-compile-execute/.classpath	(revision cddfc2dcd9c5b5028b6d7467a41269169a0d2bc0)
+++ /dev/null	(revision cddfc2dcd9c5b5028b6d7467a41269169a0d2bc0)
@@ -1,10 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<classpath>
-	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8">
-		<attributes>
-			<attribute name="module" value="true"/>
-		</attributes>
-	</classpathentry>
-	<classpathentry kind="src" path="src"/>
-	<classpathentry kind="output" path="bin"/>
-</classpath>
Index: ../../edit-compile-execute/src/StringConcatenation.java
===================================================================
diff --git a/../../edit-compile-execute/src/StringConcatenation.java b/../../edit-compile-execute/src/StringConcatenation.java
deleted file mode 100644
--- a/../../edit-compile-execute/src/StringConcatenation.java	(revision cddfc2dcd9c5b5028b6d7467a41269169a0d2bc0)
+++ /dev/null	(revision cddfc2dcd9c5b5028b6d7467a41269169a0d2bc0)
@@ -1,20 +0,0 @@
-
-public class StringConcatenation {
-	 public static void main(String[] args) {
-	        String beginning = "Hello";
-
-	        String end = " World";
-	        String combo = beginning + end;
-
-	        System.out.println(combo);
-	        
-	        long l = 50L;
-	        System.out.println("The value of l: " + l);
-	        
-	        boolean b = false;
-	        System.out.println(b + " isn't true");
-	        
-	        int x = 1, y =3;
-	        System.out.println(x + y + " is the sum of x and y");
-	    }
-}
Index: ../../README.md
===================================================================
diff --git a/../../README.md b/../../README.md
deleted file mode 100644
--- a/../../README.md	(revision cddfc2dcd9c5b5028b6d7467a41269169a0d2bc0)
+++ /dev/null	(revision cddfc2dcd9c5b5028b6d7467a41269169a0d2bc0)
@@ -1,1 +0,0 @@
-# revature
\ No newline at end of file
Index: ../../edit-compile-execute/.project
===================================================================
diff --git a/../../edit-compile-execute/.project b/../../edit-compile-execute/.project
deleted file mode 100644
--- a/../../edit-compile-execute/.project	(revision cddfc2dcd9c5b5028b6d7467a41269169a0d2bc0)
+++ /dev/null	(revision cddfc2dcd9c5b5028b6d7467a41269169a0d2bc0)
@@ -1,17 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<projectDescription>
-	<name>edit-compile-execute</name>
-	<comment></comment>
-	<projects>
-	</projects>
-	<buildSpec>
-		<buildCommand>
-			<name>org.eclipse.jdt.core.javabuilder</name>
-			<arguments>
-			</arguments>
-		</buildCommand>
-	</buildSpec>
-	<natures>
-		<nature>org.eclipse.jdt.core.javanature</nature>
-	</natures>
-</projectDescription>
Index: ../../edit-compile-execute/src/ConditionalBlocks.java
===================================================================
diff --git a/../../edit-compile-execute/src/ConditionalBlocks.java b/../../edit-compile-execute/src/ConditionalBlocks.java
deleted file mode 100644
--- a/../../edit-compile-execute/src/ConditionalBlocks.java	(revision cddfc2dcd9c5b5028b6d7467a41269169a0d2bc0)
+++ /dev/null	(revision cddfc2dcd9c5b5028b6d7467a41269169a0d2bc0)
@@ -1,24 +0,0 @@
-
-public class ConditionalBlocks {
-	public static void main(String[] args) {  
-		   boolean firstCondition = false, secondCondition = true;  
-		   
-		  /* if (b == false){  
-			   System.out.println("inside the if-statement");  
-			    }  
-			    Code above for conditional blocks lab.*/
-		   if (firstCondition){
-			      System.out.println("inside the if-statement");
-
-			      if (secondCondition){
-			        System.out.println("inside the nested if-statement");
-			      }
-			    }else if (secondCondition){
-			      System.out.println(5);
-			    }else {
-			      System.out.println("inside the else-statement");
-			    }
-
-			    System.out.println("Outside of the if-statement");
-		 }  
-}
Index: ../../edit-compile-execute/src/VariableDeclaration.java
===================================================================
diff --git a/../../edit-compile-execute/src/VariableDeclaration.java b/../../edit-compile-execute/src/VariableDeclaration.java
deleted file mode 100644
--- a/../../edit-compile-execute/src/VariableDeclaration.java	(revision cddfc2dcd9c5b5028b6d7467a41269169a0d2bc0)
+++ /dev/null	(revision cddfc2dcd9c5b5028b6d7467a41269169a0d2bc0)
@@ -1,22 +0,0 @@
-
-public class VariableDeclaration {
-	public static void main(String[] args) {
-		boolean on = false;
-		System.out.println(on);
-		
-		short s = 16;
-		System.out.println(s);
-		
-		 int i = -32;
-	     System.out.println(i);
-	     
-	     float f = 3839.34839f;
-	     System.out.println(f);
-	     
-	     long l = 4294967296l;
-		 System.out.println(l);
-		 
-		 char c = 'a';
-		 System.out.println(c);
-	}
-}
Index: ../../edit-compile-execute/src/SwitchStatement.java
===================================================================
diff --git a/../../edit-compile-execute/src/SwitchStatement.java b/../../edit-compile-execute/src/SwitchStatement.java
deleted file mode 100644
--- a/../../edit-compile-execute/src/SwitchStatement.java	(revision cddfc2dcd9c5b5028b6d7467a41269169a0d2bc0)
+++ /dev/null	(revision cddfc2dcd9c5b5028b6d7467a41269169a0d2bc0)
@@ -1,13 +0,0 @@
-
-public class SwitchStatement {
-	public static void main(String[] args) {
-		int x = 5;
-		
-		switch(x) {
-        case 6: System.out.println("case 6 ran"); break;
-        default: System.out.println("The default case ran."); break;
-        case 7: System.out.println("case 7 ran"); break;
-        case 10: System.out.println("case 10 ran");
-     }
-	}
-}
Index: ../../edit-compile-execute/src/WaterSystem.java
===================================================================
diff --git a/../../edit-compile-execute/src/WaterSystem.java b/../../edit-compile-execute/src/WaterSystem.java
deleted file mode 100644
--- a/../../edit-compile-execute/src/WaterSystem.java	(revision cddfc2dcd9c5b5028b6d7467a41269169a0d2bc0)
+++ /dev/null	(revision cddfc2dcd9c5b5028b6d7467a41269169a0d2bc0)
@@ -1,36 +0,0 @@
-
-public class WaterSystem {
-	  public static void main(String args[]){
-	   int precipitation = 0;
-       int waterOutput = 0;
-       int temp = 0;
-
-       //start an if-statement
-       if (precipitation < 20){
-       	if (temp <= 75){
-               waterOutput = 30;
-           }
-           else {
-               waterOutput = 45;
-           }
-       }else if (precipitation < 31){
-       	if (temp <= 75){
-               waterOutput = 10;
-           }
-           else {
-               waterOutput = 25;
-           } 
-       }else if (precipitation < 56){
-       	if (temp <= 75){
-               waterOutput = 0;
-           }
-           else {
-               waterOutput = 15;
-           }
-       }else {
-       	waterOutput = 0;
-       }
-
-       System.out.println("The water output should be " + waterOutput);
-   }
-}
Index: .idea/runConfigurations.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/runConfigurations.xml b/.idea/runConfigurations.xml
new file mode 100644
--- /dev/null	(date 1627506035895)
+++ b/.idea/runConfigurations.xml	(date 1627506035895)
@@ -0,0 +1,10 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="RunConfigurationProducerService">
+    <option name="ignoredProducers">
+      <set>
+        <option value="com.android.tools.idea.compose.preview.runconfiguration.ComposePreviewRunConfigurationProducer" />
+      </set>
+    </option>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1627484415524)
+++ b/.idea/misc.xml	(date 1627484415524)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" default="true" project-jdk-name="1.8" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/out" />
+  </component>
+</project>
\ No newline at end of file
Index: src/stackoverflo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/stackoverflo.java b/src/stackoverflo.java
new file mode 100644
--- /dev/null	(date 1627505610056)
+++ b/src/stackoverflo.java	(date 1627505610056)
@@ -0,0 +1,17 @@
+public class stackoverflo {
+    public static void main(String[] args) {
+        try {
+            print1();
+        }catch (StackOverflowError ex){
+            System.out.println(ex.getMessage());
+        }
+    }
+
+    public static void print1(){
+        print2();
+    }
+
+    public static void print2(){
+        print1();
+    }
+}
Index: src/stringbasics.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/stringbasics.java b/src/stringbasics.java
new file mode 100644
--- /dev/null	(date 1627484948315)
+++ b/src/stringbasics.java	(date 1627484948315)
@@ -0,0 +1,16 @@
+public class stringbasics{
+    public static void main(String[] args) {
+
+
+        String s1 = "Howdy";
+        char ch[] = {'t', 'e', 's'};
+
+        String s2 = new String(ch);
+        String s3 = new String("World");
+
+        //System.out.println(s1 + s3 + s2 );
+
+        String s4 = s1.concat(" world");
+        System.out.println(s4);
+    }
+}
Index: src/Stringcombine.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/Stringcombine.java b/src/Stringcombine.java
new file mode 100644
--- /dev/null	(date 1627488659170)
+++ b/src/Stringcombine.java	(date 1627488659170)
@@ -0,0 +1,14 @@
+import java.util.*;
+
+
+public class Stringcombine {
+    public static void main(String[] args) {
+        String s1 = "mark";
+        String s2 = "bom";
+        String s3 = s1 + s2;
+        System.out.println(s3);
+
+        String[] result = s3.split("\\,");
+        //System.out.println(Arrays.toString(s3));
+    }
+}
Index: src/stringbuffers.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/stringbuffers.java b/src/stringbuffers.java
new file mode 100644
--- /dev/null	(date 1627490187615)
+++ b/src/stringbuffers.java	(date 1627490187615)
@@ -0,0 +1,21 @@
+public class stringbuffers {
+    public static void main(String[] args) {
+        StringBuffer sb = new StringBuffer("the");
+        sb.append(" world");
+        System.out.println(sb);
+
+        sb.insert(9,"o");
+        System.out.println(sb);
+
+        sb.replace(0,0,"T");
+        System.out.println(sb);
+
+        sb.delete(0,2);
+        System.out.println(sb);
+
+        sb.reverse();
+        System.out.println(sb);
+
+        System.out.println(sb.capacity());
+    }
+}
Index: src/stringspeed.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/stringspeed.java b/src/stringspeed.java
new file mode 100644
--- /dev/null	(date 1627492010874)
+++ b/src/stringspeed.java	(date 1627492010874)
@@ -0,0 +1,26 @@
+import java.sql.SQLOutput;
+
+//results buffer is consitently 1ms while builder goes from 1 to 2 ms
+
+public class stringspeed {
+
+
+    public static void main(String[] args) {
+        System.out.println("Performance Test");
+        long startTime = System.currentTimeMillis();
+        StringBuffer stringBuffer = new StringBuffer("Hello");
+        for(int i=0;i<10000;i++){
+            stringBuffer.append("World");
+        }
+        System.out.println("Time taken by StringBuffer: "+ (System.currentTimeMillis() - startTime)+ " ms");
+
+        System.out.println("************************************");
+
+        startTime = System.currentTimeMillis();
+        StringBuilder stringBuilder = new StringBuilder("Hello");
+        for(int i=0;i<10000;i++){
+            stringBuilder.append("World");
+        }
+        System.out.println("Time taken by StringBuilder: "+ (System.currentTimeMillis()- startTime)+ " ms");
+    }
+}
Index: src/exeptprac.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/exeptprac.java b/src/exeptprac.java
new file mode 100644
--- /dev/null	(date 1627499116073)
+++ b/src/exeptprac.java	(date 1627499116073)
@@ -0,0 +1,18 @@
+class EmployeeException extends RuntimeException{
+
+}
+
+public class exeptprac {
+    public static void main(String[] args) {
+        int a = 5, b = 10, c = 0;
+        try {
+            c = b / a;
+        } catch (ArithmeticException ex) {
+            System.out.println(ex.getMessage());
+        } catch (Exception ex) {
+        }
+
+        //throw new EmployeeException();
+
+    }
+}
Index: src/bankeg.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/bankeg.java b/src/bankeg.java
new file mode 100644
--- /dev/null	(date 1627499680996)
+++ b/src/bankeg.java	(date 1627499680996)
@@ -0,0 +1,62 @@
+class InSufficientFundException extends Exception{
+
+    public InSufficientFundException(){
+        System.out.println("not enough money");
+    }
+
+    public InSufficientFundException(String message){
+        System.out.println(message);
+    }
+}
+
+class BankAccount{
+    private int balance = 0, accountNumber;
+
+    public BankAccount(int accountNumber){
+        this.accountNumber = accountNumber;
+    }
+
+    public void  deposit(int amount){
+        balance += amount;
+        System.out.println("$$ added"+ amount);
+    }
+
+    public void withdraw(int amount) throws InSufficientFundException {
+        if (amount <= balance) {
+            balance -= amount;
+            System.out.println("$$ lost" + amount);
+        } else {
+            throw new InSufficientFundException("to bad not enough $$");
+        }
+    }
+
+    public int getBalance(){
+        return balance;
+    }
+
+    public int getAccountNumber(){
+        return accountNumber;
+    }
+}
+
+
+
+public class bankeg {
+    public static void main(String[] args) {
+        BankAccount account = new BankAccount(123456);
+        System.out.println(account.getBalance());
+        account.deposit(5000);
+        try {
+            account.withdraw(2000);
+        } catch (InSufficientFundException e) {
+            e.printStackTrace();
+        }
+        account.deposit(1000);
+        try {
+            account.withdraw(10000);
+        } catch (InSufficientFundException e) {
+            //e.printStackTrace();
+
+        }
+    }
+}
Index: src/loginexception.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/loginexception.java b/src/loginexception.java
new file mode 100644
--- /dev/null	(date 1627502223920)
+++ b/src/loginexception.java	(date 1627502223920)
@@ -0,0 +1,40 @@
+class UserAlreadyLoggedInException extends Exception{
+
+}
+
+class Authentication{
+
+    private boolean isLoggedIn = false;
+
+    public void login(String email, String password) throws UserAlreadyLoggedInException {
+        if(!isLoggedIn){
+            if(email.equals("admin") && password.equals("123")){
+                isLoggedIn = true;
+                System.out.println("login successfully");
+            }else{
+                System.out.println("login failed! try again");
+            }
+        }else{
+            throw new UserAlreadyLoggedInException();
+        }
+    }
+
+}
+
+public class loginexception {
+    public static void main(String[] args) {
+        Authentication auth = new Authentication();
+        try {
+            auth.login("admin", "123");
+        } catch (UserAlreadyLoggedInException e) {
+            e.printStackTrace();
+        }
+
+        try {
+            auth.login("admin", "123");
+        } catch (UserAlreadyLoggedInException e) {
+            //e.printStackTrace();
+            System.out.println("Hey! you already logged In");
+        }
+    }
+}
\ No newline at end of file
Index: src/exceptions.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/exceptions.java b/src/exceptions.java
new file mode 100644
--- /dev/null	(date 1627502339464)
+++ b/src/exceptions.java	(date 1627502339464)
@@ -0,0 +1,40 @@
+public class exceptions {
+    public static void main(String[] args) {
+
+        // Case 1 : Exception not occur
+        try{
+            int c = 10/5;
+            System.out.println(c);
+        }
+        catch (Exception ex){
+            System.out.println(ex.getMessage());
+        }
+        finally {
+            System.out.println("Case 1: finally called");
+        }
+
+        // Case 2 : Exception occur but not handled
+        try{
+            int c = 20/0;
+            System.out.println(c);
+        }
+        catch (Exception ex){
+            System.out.println(ex.getMessage());
+        }
+        finally {
+            System.out.println("Case 2: finally called");
+        }
+
+        // Case 3 : Exception occur and handled
+        try{
+            int c  =10/0;
+            System.out.println(c);
+        }
+        catch (Exception ex){
+            System.out.println(ex.getMessage());
+        }
+        finally {
+            System.out.println("Case 3: finally called");
+        }
+    }
+}
\ No newline at end of file
Index: src/tripthrow.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/tripthrow.java b/src/tripthrow.java
new file mode 100644
--- /dev/null	(date 1627502669124)
+++ b/src/tripthrow.java	(date 1627502669124)
@@ -0,0 +1,21 @@
+/*public class tripthrow {
+    public static void main(String[] args) {
+        try {
+            doSomething();
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+
+    public static void doSomething() throws Exception {
+        doSomethingElse();
+    }
+
+    private static void doSomethingElse() throws Exception {
+        doSomethingSomethingElse();
+    }
+
+    private static void doSomethingSomethingElse() throws Exception {
+        throw new Exception();
+    }
+}*/
\ No newline at end of file
Index: src/tripexception.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/tripexception.java b/src/tripexception.java
new file mode 100644
--- /dev/null	(date 1627502653123)
+++ b/src/tripexception.java	(date 1627502653123)
@@ -0,0 +1,15 @@
+/*import java.io.IOException;
+
+class Calculator{
+
+    public void test() throws ArithmeticException, NullPointerException, IOException {
+
+    }
+
+}
+
+public class tripexception {
+    public static void main(String[] args) {
+
+    }
+}}*/
Index: src/arrayexcep.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/arrayexcep.java b/src/arrayexcep.java
new file mode 100644
--- /dev/null	(date 1627502773793)
+++ b/src/arrayexcep.java	(date 1627502773793)
@@ -0,0 +1,22 @@
+/**
+ * ArrayIndexOutOfBoundException
+ *
+ * Throwable -> Exception -> RuntimeException -> IndexOutOfBound
+ *
+ * */
+
+public class arrayexcep {
+    public static void main(String[] args) {
+        int[] a = new int[3];
+        a[0] = 50;
+        a[1] = 20;
+        a[2] = 30;
+
+        try{
+            System.out.println(a[10]);
+        }catch (ArrayIndexOutOfBoundsException ex){
+            System.out.println(ex.getMessage());
+        }
+
+    }
+}
Index: src/exceptcustomer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/exceptcustomer.java b/src/exceptcustomer.java
new file mode 100644
--- /dev/null	(date 1627502935781)
+++ b/src/exceptcustomer.java	(date 1627502935781)
@@ -0,0 +1,32 @@
+/**
+ * NullPointerException
+ *
+ * Throwable -> Exception -> RunTimeException
+ * */
+
+class Customer{
+    public void display(){
+        System.out.println("display...");
+    }
+}
+
+public class exceptcustomer{
+    public static void main(String[] args) {
+        String str = "Mark";
+        System.out.println(str.length());
+
+        String str2 = null;
+        try{
+            System.out.println(str2.length());
+        }catch (NullPointerException ex){
+            System.out.println(ex.getMessage());
+        }
+
+        Customer customer1 = new Customer();
+        customer1.display();
+
+        Customer customer2 = null;
+        customer2.display();
+    }
+}
+
Index: src/readererror.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/readererror.java b/src/readererror.java
new file mode 100644
--- /dev/null	(date 1627505673066)
+++ b/src/readererror.java	(date 1627505673066)
@@ -0,0 +1,28 @@
+import java.io.BufferedReader;
+import java.io.FileNotFoundException;
+import java.io.FileReader;
+import java.io.IOException;
+
+
+public class readererror {
+    public static void main(String[] args) {
+        BufferedReader bufferedReader = null;
+        try {
+            bufferedReader = new BufferedReader(new FileReader("D:\\data.txt"));
+            System.out.println(bufferedReader.readLine());
+
+        } catch (FileNotFoundException e) {
+            System.out.println(e.getMessage());
+        } catch (IOException e) {
+            e.printStackTrace();
+        } finally {
+            if(bufferedReader!=null){
+                try {
+                    bufferedReader.close();
+                } catch (IOException e) {
+                    e.printStackTrace();
+                }
+            }
+        }
+    }
+}
Index: src/moremathexceptions.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/moremathexceptions.java b/src/moremathexceptions.java
new file mode 100644
--- /dev/null	(date 1627505721485)
+++ b/src/moremathexceptions.java	(date 1627505721485)
@@ -0,0 +1,21 @@
+public class moremathexceptions {
+    public static void main(String[] args) {
+        int a = 10;
+        int b = 20;
+        int c = 0;
+
+        try{
+            c = a / b;
+        }
+        catch (ArithmeticException ex){
+
+        }
+        catch (NullPointerException | NumberFormatException e){
+
+        }
+        catch (Exception ex){
+
+        }
+
+    }
+}
Index: src/fivecatch.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/fivecatch.java b/src/fivecatch.java
new file mode 100644
--- /dev/null	(date 1627505782609)
+++ b/src/fivecatch.java	(date 1627505782609)
@@ -0,0 +1,48 @@
+public class fivecatch {
+    public static void main(String[] args) {
+
+        // 1st
+        try{
+
+        }catch (Exception e){
+
+        }
+
+        // 2nd
+        try{
+
+        }
+        catch (ArithmeticException e){
+
+        }
+        catch (Exception e){
+
+        }
+
+        // 3rd
+        try{
+            try{
+
+            }catch (Exception ex){
+
+            }
+        }catch (Exception ex){
+
+        }
+
+        // 4th
+        try{
+
+        }
+        finally {
+
+        }
+
+        // 5th
+//        catch (Exception e) {
+//
+//        }
+
+
+    }
+}
Index: stringbasics.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/stringbasics.iml b/stringbasics.iml
new file mode 100644
--- /dev/null	(date 1627484415123)
+++ b/stringbasics.iml	(date 1627484415123)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/src" isTestSource="false" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+    <orderEntry type="library" name="KotlinJavaRuntime" level="project" />
+  </component>
+</module>
\ No newline at end of file
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1627484423815)
+++ b/.idea/.gitignore	(date 1627484423815)
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
Index: .idea/kotlinc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/kotlinc.xml b/.idea/kotlinc.xml
new file mode 100644
--- /dev/null	(date 1627484415665)
+++ b/.idea/kotlinc.xml	(date 1627484415665)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Kotlin2JvmCompilerArguments">
+    <option name="jvmTarget" value="1.8" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/libraries/KotlinJavaRuntime.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/KotlinJavaRuntime.xml b/.idea/libraries/KotlinJavaRuntime.xml
new file mode 100644
--- /dev/null	(date 1627484415350)
+++ b/.idea/libraries/KotlinJavaRuntime.xml	(date 1627484415350)
@@ -0,0 +1,15 @@
+<component name="libraryTable">
+  <library name="KotlinJavaRuntime">
+    <CLASSES>
+      <root url="jar://$KOTLIN_BUNDLED$/lib/kotlin-stdlib.jar!/" />
+      <root url="jar://$KOTLIN_BUNDLED$/lib/kotlin-reflect.jar!/" />
+      <root url="jar://$KOTLIN_BUNDLED$/lib/kotlin-test.jar!/" />
+    </CLASSES>
+    <JAVADOC />
+    <SOURCES>
+      <root url="jar://$KOTLIN_BUNDLED$/lib/kotlin-stdlib-sources.jar!/" />
+      <root url="jar://$KOTLIN_BUNDLED$/lib/kotlin-reflect-sources.jar!/" />
+      <root url="jar://$KOTLIN_BUNDLED$/lib/kotlin-test-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: src/stockpurchase.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/stockpurchase.java b/src/stockpurchase.java
new file mode 100644
--- /dev/null	(date 1627508596601)
+++ b/src/stockpurchase.java	(date 1627508596601)
@@ -0,0 +1,25 @@
+
+
+public class stockpurchase {
+    public static void main(String[] args) {
+        int[] prices = {7,1,5,3,6,4};
+        int low = 100, high = 0;
+
+        for (int i = 0; i < prices.length; i++){
+            int val = prices[i];
+            if (low > val){
+                low = prices[i];
+            }
+        }
+        System.out.println(low);
+        for (int i=0; i <prices.length; i++){
+            int val = prices[i];
+            if(high < val ){
+                high = val;
+            }
+        }
+        System.out.println(high);
+        System.out.println(high-low);
+
+    }
+}
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	(date 1627484415234)
+++ b/.idea/modules.xml	(date 1627484415234)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/stringbasics.iml" filepath="$PROJECT_DIR$/stringbasics.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/uiDesigner.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/uiDesigner.xml b/.idea/uiDesigner.xml
new file mode 100644
--- /dev/null	(date 1627502233498)
+++ b/.idea/uiDesigner.xml	(date 1627502233498)
@@ -0,0 +1,124 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Palette2">
+    <group name="Swing">
+      <item class="com.intellij.uiDesigner.HSpacer" tooltip-text="Horizontal Spacer" icon="/com/intellij/uiDesigner/icons/hspacer.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="1" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="com.intellij.uiDesigner.VSpacer" tooltip-text="Vertical Spacer" icon="/com/intellij/uiDesigner/icons/vspacer.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="1" anchor="0" fill="2" />
+      </item>
+      <item class="javax.swing.JPanel" icon="/com/intellij/uiDesigner/icons/panel.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JScrollPane" icon="/com/intellij/uiDesigner/icons/scrollPane.png" removable="false" auto-create-binding="false" can-attach-label="true">
+        <default-constraints vsize-policy="7" hsize-policy="7" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JButton" icon="/com/intellij/uiDesigner/icons/button.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="0" fill="1" />
+        <initial-values>
+          <property name="text" value="Button" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JRadioButton" icon="/com/intellij/uiDesigner/icons/radioButton.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="RadioButton" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JCheckBox" icon="/com/intellij/uiDesigner/icons/checkBox.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="CheckBox" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JLabel" icon="/com/intellij/uiDesigner/icons/label.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="Label" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JTextField" icon="/com/intellij/uiDesigner/icons/textField.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JPasswordField" icon="/com/intellij/uiDesigner/icons/passwordField.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JFormattedTextField" icon="/com/intellij/uiDesigner/icons/formattedTextField.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextArea" icon="/com/intellij/uiDesigner/icons/textArea.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextPane" icon="/com/intellij/uiDesigner/icons/textPane.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JEditorPane" icon="/com/intellij/uiDesigner/icons/editorPane.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JComboBox" icon="/com/intellij/uiDesigner/icons/comboBox.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="2" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JTable" icon="/com/intellij/uiDesigner/icons/table.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JList" icon="/com/intellij/uiDesigner/icons/list.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="2" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTree" icon="/com/intellij/uiDesigner/icons/tree.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTabbedPane" icon="/com/intellij/uiDesigner/icons/tabbedPane.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSplitPane" icon="/com/intellij/uiDesigner/icons/splitPane.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSpinner" icon="/com/intellij/uiDesigner/icons/spinner.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSlider" icon="/com/intellij/uiDesigner/icons/slider.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSeparator" icon="/com/intellij/uiDesigner/icons/separator.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JProgressBar" icon="/com/intellij/uiDesigner/icons/progressbar.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JToolBar" icon="/com/intellij/uiDesigner/icons/toolbar.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1">
+          <preferred-size width="-1" height="20" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JToolBar$Separator" icon="/com/intellij/uiDesigner/icons/toolbarSeparator.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JScrollBar" icon="/com/intellij/uiDesigner/icons/scrollbar.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="0" anchor="0" fill="2" />
+      </item>
+    </group>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1627484534595)
+++ b/.idea/vcs.xml	(date 1627484534595)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="$PROJECT_DIR$/../.." vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
diff --git a/../../test.txt b/../../test.txt
deleted file mode 100644
